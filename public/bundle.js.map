{
  "version": 3,
  "sources": ["../src/domain/Task.ts", "../src/domain/TaskId.ts", "../src/domain/Title.ts", "../src/infra/InMemoryTaskRepository.ts", "../src/infra/SimpleEventPublisher.ts", "../src/application/TaskService.ts", "../src/browser/index.ts"],
  "sourcesContent": ["import { TaskId } from './TaskId';\nimport { Title } from './Title';\nimport { DomainEvent } from './DomainEvent';\n\nexport class Task {\n  private _completed: boolean;\n  private _events: DomainEvent[] = [];\n\n  constructor(public readonly id: TaskId, public title: Title, completed = false) {\n    this._completed = completed;\n  }\n\n  get completed(): boolean {\n    return this._completed;\n  }\n\n  complete(): void {\n    if (this._completed) return; // idempotenza\n    this._completed = true;\n    this._events.push({\n      type: 'TaskCompleted',\n      occurredOn: new Date(),\n      payload: { taskId: this.id.toString(), title: this.title.toString() }\n    });\n  }\n\n  pullDomainEvents(): DomainEvent[] {\n    const ev = [...this._events];\n    this._events = [];\n    return ev;\n  }\n}", "export class TaskId {\n  private readonly _value: string;\n\n  constructor(value: string) {\n    if (!value || value.trim() === '') throw new Error('TaskId required');\n    this._value = value;\n    Object.freeze(this);\n  }\n\n  toString(): string {\n    return this._value;\n  }\n\n  equals(other?: TaskId): boolean {\n    return other instanceof TaskId && other._value === this._value;\n  }\n}", "export class Title {\n  private readonly _text: string;\n\n  constructor(text: string) {\n    if (!text || text.trim().length === 0) throw new Error('Title cannot be empty');\n    this._text = text.trim();\n    Object.freeze(this);\n  }\n\n  toString(): string {\n    return this._text;\n  }\n\n  equals(other?: Title): boolean {\n    return other instanceof Title && other._text === this._text;\n  }\n}", "import { TaskRepository } from '../repositories/TaskRepository';\nimport { Task } from '../domain/Task';\nimport { TaskId } from '../domain/TaskId';\nimport { Title } from '../domain/Title';\n\nexport class InMemoryTaskRepository implements TaskRepository {\n  private store = new Map<string, { id: string; title: string; completed: boolean }>();\n\n  async save(task: Task): Promise<void> {\n    this.store.set(task.id.toString(), {\n      id: task.id.toString(),\n      title: task.title.toString(),\n      completed: task.completed\n    });\n  }\n\n  async findById(id: TaskId | string): Promise<Task | null> {\n    const key = id instanceof TaskId ? id.toString() : String(id);\n    const raw = this.store.get(key);\n    if (!raw) return null;\n    return new Task(new TaskId(raw.id), new Title(raw.title), raw.completed);\n  }\n\n  async findAll(): Promise<Task[]> {\n    const res: Task[] = [];\n    for (const raw of this.store.values()) {\n      res.push(new Task(new TaskId(raw.id), new Title(raw.title), raw.completed));\n    }\n    return res;\n  }\n}", "import { DomainEvent } from '../domain/DomainEvent';\n\nexport interface EventPublisher {\n  publish(event: DomainEvent): Promise<void>;\n}\n\nexport class SimpleEventPublisher implements EventPublisher {\n  async publish(event: DomainEvent): Promise<void> {\n    // demo: loggare l'evento. In produzione qui puoi inviare a un bus, Kafka, ecc.\n    console.info('[DomainEvent]', event.type, JSON.stringify(event.payload));\n  }\n}", "import { Task } from '../domain/Task';\nimport { TaskId } from '../domain/TaskId';\nimport { Title } from '../domain/Title';\nimport { TaskRepository } from '../repositories/TaskRepository';\nimport { EventPublisher } from '../infra/SimpleEventPublisher';\n\nexport class TaskService {\n  constructor(private repo: TaskRepository, private publisher?: EventPublisher) {}\n\n  async createTask(id: string, titleText: string): Promise<Task> {\n    const idVo = new TaskId(id);\n    const title = new Title(titleText);\n    const task = new Task(idVo, title);\n    await this.repo.save(task);\n    return task;\n  }\n\n  async completeTask(id: string): Promise<Task> {\n    const task = await this.repo.findById(id);\n    if (!task) throw new Error('Task not found');\n    task.complete();\n    await this.repo.save(task);\n\n    if (this.publisher) {\n      const events = task.pullDomainEvents();\n      for (const ev of events) {\n        await this.publisher.publish(ev);\n      }\n    }\n    return task;\n  }\n\n  async listTasks(): Promise<Task[]> {\n    if (typeof this.repo.findAll === 'function') {\n      return this.repo.findAll!();\n    }\n    throw new Error('Repository does not support listing');\n  }\n}", "import { InMemoryTaskRepository } from '../infra/InMemoryTaskRepository';\nimport { SimpleEventPublisher } from '../infra/SimpleEventPublisher';\nimport { TaskService } from '../application/TaskService';\n\n// UI markup (attendi DOM)\nfunction template() {\n  return `\n  <div style=\"font-family:system-ui, -apple-system, 'Segoe UI', Roboto, Arial; padding:18px; max-width:900px;\">\n    <h1>DDD Task Demo (browser)</h1>\n    <div style=\"display:flex;gap:8px;margin-bottom:12px;\">\n      <input id=\"taskId\" type=\"text\" placeholder=\"id (es. task-1)\" />\n      <input id=\"taskTitle\" type=\"text\" placeholder=\"Titolo task\" style=\"flex:1\" />\n      <button id=\"createBtn\">Crea</button>\n    </div>\n\n    <h3>Tasks</h3>\n    <ul id=\"tasksList\"></ul>\n\n    <div style=\"margin-top:18px;padding:10px;background:#f7f7f7;border-radius:6px;\">\n      <strong>Domain Events</strong>\n      <div id=\"eventsLog\" style=\"font-family:monospace;font-size:13px;margin-top:8px;max-height:200px;overflow:auto\"></div>\n    </div>\n  </div>\n  `;\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  document.body.innerHTML = template();\n\n  const repo = new InMemoryTaskRepository();\n  const eventsDiv = document.getElementById('eventsLog')!;\n  const publisher = new SimpleEventPublisher();\n  // override publish to also append to DOM\n  publisher.publish = async (ev) => {\n    console.info('[DomainEvent]', ev);\n    const node = document.createElement('div');\n    node.textContent = `[${ev.type}] ${JSON.stringify(ev.payload)}`;\n    // prepend\n    if (eventsDiv.firstChild) eventsDiv.insertBefore(node, eventsDiv.firstChild);\n    else eventsDiv.appendChild(node);\n  };\n\n  const service = new TaskService(repo, publisher);\n\n  const tasksList = document.getElementById('tasksList') as HTMLUListElement;\n  const createBtn = document.getElementById('createBtn') as HTMLButtonElement;\n  const inputId = document.getElementById('taskId') as HTMLInputElement;\n  const inputTitle = document.getElementById('taskTitle') as HTMLInputElement;\n\n  async function refreshUI() {\n    const tasks = await service.listTasks();\n    tasksList.innerHTML = '';\n    tasks.sort((a, b) => a.id.toString().localeCompare(b.id.toString()));\n    for (const t of tasks) {\n      const li = document.createElement('li');\n      li.style.marginBottom = '8px';\n      li.className = t.completed ? 'completed' : '';\n      li.innerHTML = `<strong>${t.id.toString()}</strong> \u2014 ${t.title.toString()} `;\n      if (!t.completed) {\n        const btn = document.createElement('button');\n        btn.textContent = 'Completa';\n        btn.onclick = async () => {\n          try {\n            await service.completeTask(t.id.toString());\n            await refreshUI();\n          } catch (err) {\n            alert((err as Error).message || String(err));\n          }\n        };\n        li.appendChild(btn);\n      } else {\n        const span = document.createElement('span');\n        span.style.marginLeft = '8px';\n        span.textContent = '\u2705 completato';\n        li.appendChild(span);\n      }\n      tasksList.appendChild(li);\n    }\n  }\n\n  createBtn.addEventListener('click', async () => {\n    const id = inputId.value.trim();\n    const title = inputTitle.value.trim();\n    if (!id || !title) {\n      alert('Inserisci id e titolo');\n      return;\n    }\n    try {\n      await service.createTask(id, title);\n      inputId.value = '';\n      inputTitle.value = '';\n      await refreshUI();\n    } catch (err) {\n      alert((err as Error).message || String(err));\n    }\n  });\n\n  // Seed demo data\n  try {\n    await service.createTask('task-1', 'Scrivere esempio DDD in TypeScript (browser)');\n    await service.createTask('task-2', 'Provare a completare task');\n  } catch (e) {}\n  await refreshUI();\n});"],
  "mappings": "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",
  "names": []
}
